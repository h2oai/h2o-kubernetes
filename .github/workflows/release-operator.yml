name: Operator Release
# Creates a release for push event  to matching operator-*, i.e. v1.0, v20.15.10
# The release created is a draft - this means it has to be checked and published manually afterwards to enforce manual check.
on:
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New version'
        required: true

env:
  CARGO_TERM_COLOR: always
  TARGET_LINUX: x86_64-unknown-linux-gnu
  TARGET_MACOS: x86_64-apple-darwin
  TARGET_WINDOWS: x86_64-pc-windows-gnu
  RELEASED_ARTIFACT_NAME: h2o-operator
  VERSION: ${{ github.ref }}
  OPERATOR_NAME: h2oai/h2o-operator

jobs:
  build-linux-win:
    name: Build Linux & Windows binaries
    runs-on: ubuntu-latest
    steps:
      - name: Install cross-platform compile dependencies
        run: sudo apt install mingw-w64 pkg-config libssl-dev -y
      - name: Start K3S
        uses: debianmaster/actions-k3s@v1.0.0
        id: k3s
      - uses: actions/checkout@v2
      - name: Cargo test
        run: cargo test --verbose
      - name: Release build
        run: rustup target add ${{ env.TARGET_LINUX }} && rustup target add ${{ env.TARGET_WINDOWS }} && cargo build -p ${{ env.RELEASED_ARTIFACT_NAME }} --release --target ${{ env.TARGET_LINUX }} && cargo build -p ${{ env.RELEASED_ARTIFACT_NAME }} --release --target ${{ env.TARGET_WINDOWS }}
      - name: Create ${{ env.TARGET_LINUX }} and ${{ env.TARGET_LINUX }} ZIP packages
        run: zip -j ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_LINUX }}.zip target/${{ env.TARGET_LINUX }}/release/${{ env.RELEASED_ARTIFACT_NAME }} LICENSE && zip -j ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_WINDOWS }}.zip target/${{ env.TARGET_WINDOWS }}/release/${{ env.RELEASED_ARTIFACT_NAME }}.exe LICENSE
      - name: Upload ${{ env.TARGET_LINUX }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_LINUX }}
          path: ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_LINUX }}.zip
      - name: Upload ${{ env.TARGET_WINDOWS }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_WINDOWS }}
          path: ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_WINDOWS }}.zip

  build-macos:
    name: Build macOs binaries
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create ${{ env.TARGET_MACOS }} ZIP package
        run: cargo build -p ${{ env.RELEASED_ARTIFACT_NAME }} --release --target ${{ env.TARGET_MACOS }} && zip -j ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_MACOS }}.zip target/${{ env.TARGET_MACOS }}/release/${{ env.RELEASED_ARTIFACT_NAME }} LICENSE
      - name: Upload ${{ env.TARGET_MACOS }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_MACOS }}
          path: ${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_MACOS }}.zip

  gh-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ build-linux-win, build-macos ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Download ${{ env.TARGET_LINUX }} binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TARGET_LINUX }}
      - name: Download ${{ env.TARGET_WINDOWS }} binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TARGET_WINDOWS }}
      - name: Download ${{ env.TARGET_MACOS }} binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TARGET_MACOS }}
      - name: Upload ${{ env.TARGET_LINUX }} asset
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_LINUX }}.zip
          asset_name: ${{ env.TARGET_LINUX }}
          asset_content_type: application
      - name: Upload ${{ env.TARGET_WINDOWS }} asset
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_WINDOWS }}.zip
          asset_name: ${{ env.TARGET_WINDOWS }}
          asset_content_type: application
      - name: Upload ${{ env.TARGET_MACOS }} asset
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASED_ARTIFACT_NAME }}_${{ env.TARGET_MACOS }}.zip
          asset_name: ${{ env.TARGET_MACOS }}
          asset_content_type: application

  build-docker:
    name: Build Operator Dockerfile
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - name: Build Operator Dockerfile
        run: |
          echo "${{ secrets.OPERATOR_RED_HAT_REGISTRY_KEY }}" | docker login -u unused scan.connect.redhat.com --password-stdin
          docker build -t ${{ secrets.OPERATOR_RED_HAT_SCAN_TAG_PREFIX }}${{ env.OPERATOR_NAME }}:${{env.VERSION}} -f operator/docker/Dockerfile-operator . --build-arg OPERATOR_VERSION=${{ env.VERSION }} --no-cache
          DIGEST=$(docker images --no-trunc --quiet ${{ secrets.OPERATOR_RED_HAT_SCAN_TAG_PREFIX }}${{ env.OPERATOR_NAME }}:${{ env.VERSION }})
          docker push ${{ secrets.OPERATOR_RED_HAT_SCAN_TAG_PREFIX }}${{ env.OPERATOR_NAME }}:${{ env.VERSION }}
          python operator/release/red_hat_docker_certification.py --api_key ${{ secrets.RED_HAT_API_KEY }} --pid ${{ secrets.OPERATOR_RED_HAT_PID }} --tag ${{ env.VERSION }} $DIGEST
          CREATED_DATE=$(date --utc +%FT%T%Z)
          sed -i "s/<created-date>/$CREATED_DATE/g" operator/bundle/manifests/h2o.clusterserviceversion.yaml
          docker docker build -t ${{ secrets.OPERATOR_BUNDLE_RED_HAT_SCAN_TAG_PREFIX }}${{ env.OPERATOR_NAME }}-bundle:${{env.VERSION}} -f operator/docker/Dockerfile-operator-bundle . --no-cache
          docker push ${{ secrets.OPERATOR_BUNDLE_RED_HAT_SCAN_TAG_PREFIX }}${{ env.OPERATOR_NAME }}-bundle:${{ env.VERSION }}
          python operator/release/red_hat_docker_certification.py --api_key ${{ secrets.RED_HAT_API_KEY }} --pid ${{ secrets.OPERATOR_BUNDLE_RED_HAT_PID }} --tag ${{ env.VERSION }} $DIGEST
          docker logout

  push-git-tag:
    needs: [ build-docker, gh-release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Extract current version
        id: current_ver
        run: |
          VERSION=$(cat operator/Cargo.toml | sed -n "s/^version\s*=\s*\"\([0-9]*\.[0-9]*\.[0-9]*\)\"$/\1/p")
          echo "::set-output name=version::$VERSION"
      - name: Release tag
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: operator-${{ steps.current_ver.outputs.version }}
          commit-sha: ${{ github.sha }}

  push-new-version-git:
    needs: [push-git-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Extract current version
        id: current_ver
        run: |
          sed -i "s/version = \"${{ steps.current_ver.outputs.version }}\"/version = \"${{ github.event.inputs.new_version }}\"/g" operator/Cargo.toml
      - name: Commit new version
        uses: EndBug/add-and-commit@v5
        with:
          author_name: 'Operator Release'
          author_email: '<pavel.pscheidl@h2o.ai>'
          message: 'Version ${{ github.event.inputs.new_version }}'
          add: 'operator/Cargo.toml'
          tag: 'operator-${{ github.event.inputs.new_version }} --force'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}